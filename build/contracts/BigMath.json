{
  "contractName": "BigMath",
  "abi": [
    {
      "name": "bigDiv2x1",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "_numA"
        },
        {
          "type": "uint256",
          "name": "_numB"
        },
        {
          "type": "uint256",
          "name": "_den"
        },
        {
          "type": "bool",
          "name": "_roundUp"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 8179
    },
    {
      "name": "bigDiv2x2",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "_numA"
        },
        {
          "type": "uint256",
          "name": "_numB"
        },
        {
          "type": "uint256",
          "name": "_denA"
        },
        {
          "type": "uint256",
          "name": "_denB"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 9041
    },
    {
      "name": "sqrtOfTokensSupplySquared",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "_tokenValue"
        },
        {
          "type": "uint256",
          "name": "_supply"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 168808
    }
  ],
  "bytecode": "0x61166f56600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263104884bf600051141561097d5734156100ac57600080fd5b606435600281106100bc57600080fd5b50602435156004351517156100d657600060005260206000f35b6024356004356100e557600080fd5b6004357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe04600160043561011857600080fd5b6004357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0401101561014957600080fd5b600160043561015757600080fd5b6004357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe040111156101cc5760443561018f57600080fd5b60443560043515156101a25760006101c2565b6024356004356024356004350204146101ba57600080fd5b602435600435025b0460005260206000f35b60243560043511156101eb5760043561014052602435610160526101fa565b60243561014052600435610160525b7001000000000000000000000000000000006044351115156102965760443561022257600080fd5b6044356101405104151561023757600061028d565b6101605160443561024757600080fd5b60443561014051046101605160443561025f57600080fd5b604435610140510402041461027357600080fd5b6101605160443561028357600080fd5b6044356101405104025b60005260206000f35b61016051604435111561055a577001000000000000000000000000000000006102be57600080fd5b700100000000000000000000000000000000600160443510156102e057600080fd5b60016044350304600170010000000000000000000000000000000061030457600080fd5b7001000000000000000000000000000000006001604435101561032657600080fd5b6001604435030401101561033957600080fd5b600170010000000000000000000000000000000061035657600080fd5b7001000000000000000000000000000000006001604435101561037857600080fd5b60016044350304016101805260443561014051111561045c5761018051610140516103a257600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe046001610140516103d757600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0401101561040957600080fd5b60016101405161041857600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe04018082111561044d578061044f565b815b9050905061018052610555565b6101405161046957600080fd5b61014051604435046101605161047e57600080fd5b610160516101405104101561055457610180516101405161049e57600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe046001610140516104d357600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0401101561050557600080fd5b60016101405161051457600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe040180821015610549578061054b565b815b90509050610180525b5b610636565b60443561056657600080fd5b604435600161016051101561057a57600080fd5b6001610160510304600160443561059057600080fd5b60443560016101605110156105a457600080fd5b60016101605103040110156105b857600080fd5b60016044356105c657600080fd5b60443560016101605110156105da57600080fd5b600161016051030401610180526101805170010000000000000000000000000000000061060657600080fd5b70010000000000000000000000000000000061016051048082101561062b578061062d565b815b90509050610180525b67ffffffffffffffff61018051808212156106515780610653565b815b90509050610180526101805161016051604435808211156106745780610676565b815b9050905080821115610688578061068a565b815b905090506101805261018051700100000000000000000000000000000000808211156106b657806106b8565b815b9050905061018052610180516106cd57600080fd5b61018051600160443510156106e157600080fd5b600160443503046001610180516106f757600080fd5b610180516001604435101561070b57600080fd5b6001604435030401101561071e57600080fd5b60016101805161072d57600080fd5b610180516001604435101561074157600080fd5b60016044350304016101a0526101a05161075a57600080fd5b6101a05161014051046101c052610160516101c05161077857600080fd5b6101c0517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0460016101c0516107ad57600080fd5b6101c0517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe040110156107df57600080fd5b60016101c0516107ee57600080fd5b6101c0517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0401111561086d576101805161082857600080fd5b610180516101c051151561083d576000610863565b610160516101c051610160516101c05102041461085957600080fd5b610160516101c051025b0460005260206000f35b610160516101c0511115610903576101805161088857600080fd5b610180516101c05104151561089e5760006108fa565b61016051610180516108af57600080fd5b610180516101c0510461016051610180516108c957600080fd5b610180516101c051040204146108de57600080fd5b61016051610180516108ef57600080fd5b610180516101c05104025b60005260206000f35b6101c08051151561091557600061096b565b6101805161092257600080fd5b61018051610160510481516101805161093a57600080fd5b610180516101605104835102041461095157600080fd5b6101805161095e57600080fd5b6101805161016051048151025b8152506101c05160005260206000f350005b632bab7441600051141561124757341561099657600080fd5b602435156004351517156109af57600060005260206000f35b6064356044356109be57600080fd5b6044357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04116024356004356109f357600080fd5b6004357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04111615610ac2576044351515610a2f576000610a4f565b606435604435606435604435020414610a4757600080fd5b606435604435025b610a5857600080fd5b6044351515610a68576000610a88565b606435604435606435604435020414610a8057600080fd5b606435604435025b6004351515610a98576000610ab8565b602435600435602435600435020414610ab057600080fd5b602435600435025b0460005260206000f35b60043561014052610140516024351115610ade57602435610140525b610140516044351115610af357604435610140525b610140516064351115610b0857606435610140525b700100000000000000000000000000000000610b2357600080fd5b7001000000000000000000000000000000006101405104610160526f8000000000000000000000000000000061016051101561016051151715610b7e57610160805160018251011015610b7557600080fd5b60018151018152505b600061018052700100000000000000000000000000000000600435101515610bea5761016051610bad57600080fd5b610160516004350461014052610180606051600182510180604051901315610bd457600080fd5b8091901215610be257600080fd5b815250610bf2565b600435610140525b700100000000000000000000000000000000602435101515610ca75761014080511515610c20576000610c73565b61016051610c2d57600080fd5b6101605160243504815161016051610c4457600080fd5b61016051602435048351020414610c5a57600080fd5b61016051610c6757600080fd5b61016051602435048151025b815250610180606051600182510180604051901315610c9157600080fd5b8091901215610c9f57600080fd5b815250610cda565b61014080511515610cb9576000610cd6565b60243581516024358351020414610ccf57600080fd5b6024358151025b8152505b700100000000000000000000000000000000604435101515610db45761016051610d0357600080fd5b6101605160016044351015610d1757600080fd5b60016044350304600161016051610d2d57600080fd5b6101605160016044351015610d4157600080fd5b60016044350304011015610d5457600080fd5b600161016051610d6357600080fd5b6101605160016044351015610d7757600080fd5b60016044350304016101a052610180606051600182510380604051901315610d9e57600080fd5b8091901215610dac57600080fd5b815250610dbc565b6044356101a0525b700100000000000000000000000000000000606435101515610fcd576101a080511515610dea576000610f99565b61016051610df757600080fd5b6101605160016064351015610e0b57600080fd5b60016064350304600161016051610e2157600080fd5b6101605160016064351015610e3557600080fd5b60016064350304011015610e4857600080fd5b600161016051610e5757600080fd5b6101605160016064351015610e6b57600080fd5b6001606435030401815161016051610e8257600080fd5b6101605160016064351015610e9657600080fd5b60016064350304600161016051610eac57600080fd5b6101605160016064351015610ec057600080fd5b60016064350304011015610ed357600080fd5b600161016051610ee257600080fd5b6101605160016064351015610ef657600080fd5b60016064350304018351020414610f0c57600080fd5b61016051610f1957600080fd5b6101605160016064351015610f2d57600080fd5b60016064350304600161016051610f4357600080fd5b6101605160016064351015610f5757600080fd5b60016064350304011015610f6a57600080fd5b600161016051610f7957600080fd5b6101605160016064351015610f8d57600080fd5b60016064350304018151025b815250610180606051600182510380604051901315610fb757600080fd5b8091901215610fc557600080fd5b815250611000565b6101a080511515610fdf576000610ffc565b60643581516064358351020414610ff557600080fd5b6064358151025b8152505b6101406101a05161101057600080fd5b6101a05181510481525060016101805114156110605761014080511515611038576000611058565b61016051815161016051835102041461105057600080fd5b610160518151025b815250611238565b600261018051141561113f576101408051151561107e576000611137565b61016051151561108f5760006110b5565b610160516101605161016051610160510204146110ab57600080fd5b6101605161016051025b81516101605115156110c85760006110ee565b610160516101605161016051610160510204146110e457600080fd5b6101605161016051025b83510204146110fc57600080fd5b61016051151561110d576000611133565b6101605161016051610160516101605102041461112957600080fd5b6101605161016051025b8151025b815250611237565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610180511415611189576101406101605161117a57600080fd5b61016051815104815250611236565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe610180511415611235576101406101605115156111c85760006111ee565b610160516101605161016051610160510204146111e457600080fd5b6101605161016051025b6111f757600080fd5b61016051151561120857600061122e565b6101605161016051610160516101605102041461122457600080fd5b6101605161016051025b8151048152505b5b5b5b6101405160005260206000f350005b63be00ef3f600051141561166557341561126057600080fd5b600435610140526101408051602435151561127c57600061129c565b60243560243560243560243502041461129457600080fd5b602435602435025b82510110156112aa57600080fd5b60243515156112ba5760006112da565b6024356024356024356024350204146112d257600080fd5b602435602435025b815101815250610140670de0b6b3a76400006112f557600080fd5b670de0b6b3a7640000815104815250670de0b6b3a764000061131657600080fd5b670de0b6b3a76400006101405104610160526402540be40061016051151561133f576000611374565b670de0b6b3a764000061016051670de0b6b3a76400006101605102041461136557600080fd5b670de0b6b3a764000061016051025b61014051101561138357600080fd5b6101605115156113945760006113c9565b670de0b6b3a764000061016051670de0b6b3a7640000610160510204146113ba57600080fd5b670de0b6b3a764000061016051025b6101405103026080518111156113de57600080fd5b6101805261018060a05181516b204fce5e3e25026110000000806402540be400830205905090508060805190131561141557600080fd5b809190121561142357600080fd5b81525061018060a0516402540be400610160510260805181111561144657600080fd5b8251018060805190131561145957600080fd5b809190121561146757600080fd5b815250600061018051121561147b57600080fd5b6101805115156114905760006101a0526115d9565b60a05160a0516402540be4006101805101806080519013156114b157600080fd5b80919012156114bf57600080fd5b6404a817c800806402540be40083020590509050806080519013156114e357600080fd5b80919012156114f157600080fd5b6101a052610180516101c0526101e06000610100818352015b6101c0516101a051141561151d576115d6565b6101a0516101c05260a05160a0516101a05160a051610180516101a0518061154457600080fd5b806402540be400830205905090508060805190131561156257600080fd5b809190121561157057600080fd5b018060805190131561158157600080fd5b809190121561158f57600080fd5b6404a817c800806402540be40083020590509050806080519013156115b357600080fd5b80919012156115c157600080fd5b6101a0525b815160010180835281141561150a575b50505b6101a0516101805261018060a0516b204fce5e3e250261100000008251818102811583838305141761160a57600080fd5b6402540be40081059050905090508060805190131561162857600080fd5b809190121561163657600080fd5b8152506402540be40061018051600081121561165157600080fd5b04610140526101405160005260206000f350005b60006000fd5b61000461166f0361000460003961000461166f036000f3",
  "deployedBytecode": "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263104884bf600051141561097d5734156100ac57600080fd5b606435600281106100bc57600080fd5b50602435156004351517156100d657600060005260206000f35b6024356004356100e557600080fd5b6004357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe04600160043561011857600080fd5b6004357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0401101561014957600080fd5b600160043561015757600080fd5b6004357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe040111156101cc5760443561018f57600080fd5b60443560043515156101a25760006101c2565b6024356004356024356004350204146101ba57600080fd5b602435600435025b0460005260206000f35b60243560043511156101eb5760043561014052602435610160526101fa565b60243561014052600435610160525b7001000000000000000000000000000000006044351115156102965760443561022257600080fd5b6044356101405104151561023757600061028d565b6101605160443561024757600080fd5b60443561014051046101605160443561025f57600080fd5b604435610140510402041461027357600080fd5b6101605160443561028357600080fd5b6044356101405104025b60005260206000f35b61016051604435111561055a577001000000000000000000000000000000006102be57600080fd5b700100000000000000000000000000000000600160443510156102e057600080fd5b60016044350304600170010000000000000000000000000000000061030457600080fd5b7001000000000000000000000000000000006001604435101561032657600080fd5b6001604435030401101561033957600080fd5b600170010000000000000000000000000000000061035657600080fd5b7001000000000000000000000000000000006001604435101561037857600080fd5b60016044350304016101805260443561014051111561045c5761018051610140516103a257600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe046001610140516103d757600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0401101561040957600080fd5b60016101405161041857600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe04018082111561044d578061044f565b815b9050905061018052610555565b6101405161046957600080fd5b61014051604435046101605161047e57600080fd5b610160516101405104101561055457610180516101405161049e57600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe046001610140516104d357600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0401101561050557600080fd5b60016101405161051457600080fd5b610140517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe040180821015610549578061054b565b815b90509050610180525b5b610636565b60443561056657600080fd5b604435600161016051101561057a57600080fd5b6001610160510304600160443561059057600080fd5b60443560016101605110156105a457600080fd5b60016101605103040110156105b857600080fd5b60016044356105c657600080fd5b60443560016101605110156105da57600080fd5b600161016051030401610180526101805170010000000000000000000000000000000061060657600080fd5b70010000000000000000000000000000000061016051048082101561062b578061062d565b815b90509050610180525b67ffffffffffffffff61018051808212156106515780610653565b815b90509050610180526101805161016051604435808211156106745780610676565b815b9050905080821115610688578061068a565b815b905090506101805261018051700100000000000000000000000000000000808211156106b657806106b8565b815b9050905061018052610180516106cd57600080fd5b61018051600160443510156106e157600080fd5b600160443503046001610180516106f757600080fd5b610180516001604435101561070b57600080fd5b6001604435030401101561071e57600080fd5b60016101805161072d57600080fd5b610180516001604435101561074157600080fd5b60016044350304016101a0526101a05161075a57600080fd5b6101a05161014051046101c052610160516101c05161077857600080fd5b6101c0517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0460016101c0516107ad57600080fd5b6101c0517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe040110156107df57600080fd5b60016101c0516107ee57600080fd5b6101c0517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0401111561086d576101805161082857600080fd5b610180516101c051151561083d576000610863565b610160516101c051610160516101c05102041461085957600080fd5b610160516101c051025b0460005260206000f35b610160516101c0511115610903576101805161088857600080fd5b610180516101c05104151561089e5760006108fa565b61016051610180516108af57600080fd5b610180516101c0510461016051610180516108c957600080fd5b610180516101c051040204146108de57600080fd5b61016051610180516108ef57600080fd5b610180516101c05104025b60005260206000f35b6101c08051151561091557600061096b565b6101805161092257600080fd5b61018051610160510481516101805161093a57600080fd5b610180516101605104835102041461095157600080fd5b6101805161095e57600080fd5b6101805161016051048151025b8152506101c05160005260206000f350005b632bab7441600051141561124757341561099657600080fd5b602435156004351517156109af57600060005260206000f35b6064356044356109be57600080fd5b6044357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04116024356004356109f357600080fd5b6004357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04111615610ac2576044351515610a2f576000610a4f565b606435604435606435604435020414610a4757600080fd5b606435604435025b610a5857600080fd5b6044351515610a68576000610a88565b606435604435606435604435020414610a8057600080fd5b606435604435025b6004351515610a98576000610ab8565b602435600435602435600435020414610ab057600080fd5b602435600435025b0460005260206000f35b60043561014052610140516024351115610ade57602435610140525b610140516044351115610af357604435610140525b610140516064351115610b0857606435610140525b700100000000000000000000000000000000610b2357600080fd5b7001000000000000000000000000000000006101405104610160526f8000000000000000000000000000000061016051101561016051151715610b7e57610160805160018251011015610b7557600080fd5b60018151018152505b600061018052700100000000000000000000000000000000600435101515610bea5761016051610bad57600080fd5b610160516004350461014052610180606051600182510180604051901315610bd457600080fd5b8091901215610be257600080fd5b815250610bf2565b600435610140525b700100000000000000000000000000000000602435101515610ca75761014080511515610c20576000610c73565b61016051610c2d57600080fd5b6101605160243504815161016051610c4457600080fd5b61016051602435048351020414610c5a57600080fd5b61016051610c6757600080fd5b61016051602435048151025b815250610180606051600182510180604051901315610c9157600080fd5b8091901215610c9f57600080fd5b815250610cda565b61014080511515610cb9576000610cd6565b60243581516024358351020414610ccf57600080fd5b6024358151025b8152505b700100000000000000000000000000000000604435101515610db45761016051610d0357600080fd5b6101605160016044351015610d1757600080fd5b60016044350304600161016051610d2d57600080fd5b6101605160016044351015610d4157600080fd5b60016044350304011015610d5457600080fd5b600161016051610d6357600080fd5b6101605160016044351015610d7757600080fd5b60016044350304016101a052610180606051600182510380604051901315610d9e57600080fd5b8091901215610dac57600080fd5b815250610dbc565b6044356101a0525b700100000000000000000000000000000000606435101515610fcd576101a080511515610dea576000610f99565b61016051610df757600080fd5b6101605160016064351015610e0b57600080fd5b60016064350304600161016051610e2157600080fd5b6101605160016064351015610e3557600080fd5b60016064350304011015610e4857600080fd5b600161016051610e5757600080fd5b6101605160016064351015610e6b57600080fd5b6001606435030401815161016051610e8257600080fd5b6101605160016064351015610e9657600080fd5b60016064350304600161016051610eac57600080fd5b6101605160016064351015610ec057600080fd5b60016064350304011015610ed357600080fd5b600161016051610ee257600080fd5b6101605160016064351015610ef657600080fd5b60016064350304018351020414610f0c57600080fd5b61016051610f1957600080fd5b6101605160016064351015610f2d57600080fd5b60016064350304600161016051610f4357600080fd5b6101605160016064351015610f5757600080fd5b60016064350304011015610f6a57600080fd5b600161016051610f7957600080fd5b6101605160016064351015610f8d57600080fd5b60016064350304018151025b815250610180606051600182510380604051901315610fb757600080fd5b8091901215610fc557600080fd5b815250611000565b6101a080511515610fdf576000610ffc565b60643581516064358351020414610ff557600080fd5b6064358151025b8152505b6101406101a05161101057600080fd5b6101a05181510481525060016101805114156110605761014080511515611038576000611058565b61016051815161016051835102041461105057600080fd5b610160518151025b815250611238565b600261018051141561113f576101408051151561107e576000611137565b61016051151561108f5760006110b5565b610160516101605161016051610160510204146110ab57600080fd5b6101605161016051025b81516101605115156110c85760006110ee565b610160516101605161016051610160510204146110e457600080fd5b6101605161016051025b83510204146110fc57600080fd5b61016051151561110d576000611133565b6101605161016051610160516101605102041461112957600080fd5b6101605161016051025b8151025b815250611237565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610180511415611189576101406101605161117a57600080fd5b61016051815104815250611236565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe610180511415611235576101406101605115156111c85760006111ee565b610160516101605161016051610160510204146111e457600080fd5b6101605161016051025b6111f757600080fd5b61016051151561120857600061122e565b6101605161016051610160516101605102041461122457600080fd5b6101605161016051025b8151048152505b5b5b5b6101405160005260206000f350005b63be00ef3f600051141561166557341561126057600080fd5b600435610140526101408051602435151561127c57600061129c565b60243560243560243560243502041461129457600080fd5b602435602435025b82510110156112aa57600080fd5b60243515156112ba5760006112da565b6024356024356024356024350204146112d257600080fd5b602435602435025b815101815250610140670de0b6b3a76400006112f557600080fd5b670de0b6b3a7640000815104815250670de0b6b3a764000061131657600080fd5b670de0b6b3a76400006101405104610160526402540be40061016051151561133f576000611374565b670de0b6b3a764000061016051670de0b6b3a76400006101605102041461136557600080fd5b670de0b6b3a764000061016051025b61014051101561138357600080fd5b6101605115156113945760006113c9565b670de0b6b3a764000061016051670de0b6b3a7640000610160510204146113ba57600080fd5b670de0b6b3a764000061016051025b6101405103026080518111156113de57600080fd5b6101805261018060a05181516b204fce5e3e25026110000000806402540be400830205905090508060805190131561141557600080fd5b809190121561142357600080fd5b81525061018060a0516402540be400610160510260805181111561144657600080fd5b8251018060805190131561145957600080fd5b809190121561146757600080fd5b815250600061018051121561147b57600080fd5b6101805115156114905760006101a0526115d9565b60a05160a0516402540be4006101805101806080519013156114b157600080fd5b80919012156114bf57600080fd5b6404a817c800806402540be40083020590509050806080519013156114e357600080fd5b80919012156114f157600080fd5b6101a052610180516101c0526101e06000610100818352015b6101c0516101a051141561151d576115d6565b6101a0516101c05260a05160a0516101a05160a051610180516101a0518061154457600080fd5b806402540be400830205905090508060805190131561156257600080fd5b809190121561157057600080fd5b018060805190131561158157600080fd5b809190121561158f57600080fd5b6404a817c800806402540be40083020590509050806080519013156115b357600080fd5b80919012156115c157600080fd5b6101a0525b815160010180835281141561150a575b50505b6101a0516101805261018060a0516b204fce5e3e250261100000008251818102811583838305141761160a57600080fd5b6402540be40081059050905090508060805190131561162857600080fd5b809190121561163657600080fd5b8152506402540be40061018051600081121561165157600080fd5b04610140526101405160005260206000f350005b60006000fd",
  "source": "# @title Reduces the size of terms before multiplication, to avoid an overflow, and then\n# restores the proper size after division.  \n# @notice This effectively allows us to overflow values in the numerator and/or denominator \n# of a fraction, so long as the end result does not overflow as well.\n# @dev Each individual numerator or denominator term is reduced if large so that multiplication \n# is safe from overflow.  Then we perform the division using the reduced terms.  Finally the\n# result is increased to restore the original scale of terms.\n\nMAX_UINT: constant(uint256) = 2**256 - 1\n# @notice The max possible value\n\nMAX_BEFORE_SQUARE: constant(uint256) = 340282366920938463463374607431768211456\n# @notice When multiplying 2 terms, the max value is sqrt(2^256-1) \n# @dev 340282366920938463463374607431768211456 is 1 too large for squaring\n\nDIGITS_UINT: constant(uint256) = 10 ** 18\n# @notice Represents 1 full token (with 18 decimals)\n\nDIGITS_DECIMAL: constant(decimal) = convert(DIGITS_UINT, decimal)\n# @notice Represents 1 full token (with 18 decimals)\n\n@public\n@constant\ndef bigDiv2x1(\n  _numA: uint256,\n  _numB: uint256,\n  _den: uint256,\n  _roundUp: bool\n) -> uint256:\n  \"\"\"\n  @notice Multiply the numerators, scaling them down if there is potential for overflow, and then\n  scale them back up after division.\n  @param _numA the first numerator term\n  @param _numB the second numerator term\n  @param _den the denominator\n  @param _roundUp if true, the math may round the final value up from the exact expected value\n  @return the approximate value of _numA * _numB / _den\n  @dev this will overflow if the final value is > MAX_UINT (and may overflow if ~MAX_UINT)\n  rounding applies but should be close to the expected value\n  if the expected value is small, a rounding error or 1 may be a large percent error\n  \"\"\"\n  if(_numA == 0 or _numB == 0): # would underflow if we don't special case 0\n    return 0\n  if((MAX_UINT - 1) / _numA + 1 > _numB): # a*b does not overflow, return exact math.  219! 219 with round up >. 238 with >=. confirming original\n    return _numA * _numB / _den\n  \n  # Sort numerators\n  numMax: uint256\n  numMin: uint256\n  if(_numA > _numB):\n    numMax = _numA\n    numMin = _numB\n  else:\n    numMax = _numB\n    numMin = _numA\n  \n  if(_den <= MAX_BEFORE_SQUARE): # _den is small enough we don't need to factor. 219->172 with <=\n    return numMax / _den * numMin\n\n  factor:uint256\n\n  if(_den > numMin):\n    # factor =  (_den - 1) / numMin + 1 # -1134642745617220783297276204131\n    # if(True):\n    #   return (_den-1) / MAX_BEFORE_SQUARE+1 #-333419536692647521185831071680896637359\n    # if(factor < _den / MAX_BEFORE_SQUARE):\n    #   return 0\n    # no impact ? factor = max(factor, numMin / MAX_BEFORE_SQUARE ) # 12 no revert\n    factor = (_den-1) / MAX_BEFORE_SQUARE+1 # fixed here\n    \n    if(numMax > _den): # reduce to 20 errors\n      factor = min(factor, (MAX_UINT-1)/numMax+1) # final fix 56 fails\n    else:\n      if(numMax/numMin < _den/numMax):#down to 12 with min\n        factor = max(factor, (MAX_UINT - 1)/numMax+1)\n        #factor *= 100000\n      #   factor = max(2**128 - 1, factor) # TODO what's a good value here?.  64 has 15 erros, much less than 128. 32 has 20 errors\n      #   factor = min(factor, min(numMin, numMin))\n        #factor = max(factor, min(MAX_BEFORE_SQUARE, numMin))\n      pass\n      # goal for current errors is a larger factor here\n      #factor = min(factor, (MAX_UINT-1)/numMin+1) # no change, den is worse\n      #return 0 # all errors pass through this# 20 errors\n      #21 errors if i use max, 20 if min \n      #maybe max w round down\n      # if(numMax / numMin <= 1): # this did nothing > tab 2 (no impact) <= tab1\n      # #all errors hit this path\n      #   factor /= 100000\n    # else:\n    #   factor /= 100000000000\n    #factor /= 100000000000 # goal is smaller factor, numMax > den\n    #factor =0\n     # every fail is in this path.  6 fails\n  else:\n    factor = (numMin - 1) / _den + 1\n    factor = max(factor, numMin / MAX_BEFORE_SQUARE ) # 12 no revert\n  \n\n  factor = max(2**64 - 1, factor) # TODO what's a good value here?.  64 has 15 erros, much less than 128. 32 has 20 errors\n  \n  #factor += 1\n\n\n  # factor: uint256 = (max(_den, numMin) ) / min(_den, numMin)  # remove round up to get 10 but some reverts\n  # factor = max(factor, max(numMin, _den ) / MAX_BEFORE_SQUARE ) # \n\n\n#18?\n  # if(_den > numMin):\n  #   factor = (_den - 1) / numMin + 1 #\n  # else:\n  #   factor = max(numMin, _den ) / MAX_BEFORE_SQUARE  # 12 no revert\n  #   factor = max(factor, (numMin - 1) / _de340282366920938463463374607431768211456340282366920938463463374607431768211456340282366920938463463374607431768211456340282366920938463463374607431768211456n + 1)\n\n\n  factor = min(factor, min(numMin, _den)) # no impact\n  factor = min(factor, MAX_BEFORE_SQUARE)\n  \n  #factor = MAX_BEFORE_SQUARE\n  # if(True):\n  #   return factor\n  #factor /= 200000\n\n  # scale down the den \n  den: uint256 = (_den - 1) / factor + 1\n\n  # take the larger value and the scaled down den to minimize rounding\n  value: uint256 = numMax / den\n\n  # if(True):\n  #   return value\n\n  # todo why round up vs round down and >=?\n  if((MAX_UINT - 1) / value + 1 > numMin): #testing 2 (vs 133) - no change... ?\n    return value * numMin / factor #todo is this ever hit?\n  \n  # /f * num or * (num / f)\n  if(value > numMin):\n    return value / factor * numMin #testing vs 136 -> 96!!!!\n\n  # then use the smaller value and the factor to scale back up\n  value *= numMin / factor\n  \n  return value\n\n@public\n@constant\ndef bigDiv2x2(\n  _numA: uint256,\n  _numB: uint256,\n  _denA: uint256,\n  _denB: uint256\n) -> uint256:\n  \"\"\"\n  @notice Multiply the numerators, scaling them down if there is potential for overflow.\n  Multiply the denominators, scaling them down if there is potential for overflow.\n  Then compute the fraction and scale the final value back up or down as appropriate.\n  @param _numA the first numerator term\n  @param _numB the second numerator term\n  @param _denA the first denominator term\n  @param _denB the second denominator term\n  @return the approximate value of _numA * _numB / (_denA * _denB)\n  @dev rounds down by default. Comments from bigDiv2x1 apply here as well.\n  \"\"\"\n  if(_numA == 0 or _numB == 0):\n    return 0\n  if(MAX_UINT / _numA > _numB and MAX_UINT / _denA > _denB):\n    return _numA * _numB / (_denA * _denB)\n\n  # Find max value\n  value: uint256 = _numA\n  if(_numB > value):\n    value = _numB\n  if(_denA > value):\n    value = _denA\n  if(_denB > value):\n    value = _denB\n  \n  # Use max to determine factor to use\n  factor: uint256 = value / MAX_BEFORE_SQUARE \n  if(factor == 0 or factor >= MAX_BEFORE_SQUARE / 2):\n    factor += 1\n  \n  count: int128 = 0\n  \n  # Numerator\n  if(_numA >= MAX_BEFORE_SQUARE):\n    value = _numA / factor\n    count += 1\n  else:\n    value = _numA\n  if(_numB >= MAX_BEFORE_SQUARE):\n    value *= _numB / factor\n    count += 1\n  else:\n    value *= _numB\n\n  # Denominator\n  den: uint256\n  if(_denA >= MAX_BEFORE_SQUARE):\n    den = (_denA - 1) / factor + 1\n    count -= 1\n  else:\n    den = _denA\n  if(_denB >= MAX_BEFORE_SQUARE):\n    den *= (_denB - 1) / factor + 1\n    count -= 1\n  else:\n    den *= _denB\n  \n  # Faction\n  value /= den\n\n  # Scale back up/down\n  if(count == 1):\n    value *= factor\n  elif(count == 2):\n    value *= factor * factor\n  elif(count == -1):\n    value /= factor\n  elif(count == -2):\n    value /= factor * factor\n\n  return value\n\n@public\n@constant\ndef sqrtOfTokensSupplySquared(\n  _tokenValue: uint256,\n  _supply: uint256\n) -> uint256:\n  \"\"\"\n  @notice Calculates sqrt((_tokenValue + _supply^2)/10^18)*10^18\n  \"\"\"\n  tokenValue: uint256 = _tokenValue\n\n  # Math: max supply^2 given the hard-cap is 1e56 leaving room for the max tokenValue (equal to the FAIR hard-cap)\n  tokenValue += _supply * _supply\n\n  # Math: Truncates last 18 digits from tokenValue here\n  tokenValue /= DIGITS_UINT\n\n  # Math: Truncates another 8 digits from tokenValue (losing 26 digits in total)\n  # This will cause small values to round to 0 tokens for the payment (the payment is still accepted)\n  # Math: Max supported tokenValue is 1.7e+56. If supply is at the hard-cap tokenValue would be 1e38, leaving room\n  # for a _currencyValue up to 1.7e33 (or 1.7e15 after decimals)\n\n  temp: uint256 = tokenValue / DIGITS_UINT\n  decimalValue: decimal = convert(tokenValue - temp * DIGITS_UINT, decimal)\n  decimalValue /= DIGITS_DECIMAL\n  decimalValue += convert(temp, decimal)\n\n  decimalValue = sqrt(decimalValue)\n\n  # Unshift results\n  # Math: decimalValue has a max value of 2^127 - 1 which after sqrt can always be multiplied\n  # here without overflow\n  decimalValue *= DIGITS_DECIMAL\n\n  tokenValue = convert(decimalValue, uint256)\n\n  return tokenValue\n",
  "sourcePath": "/home/nick/git/hardlydifficult-ethereum-vyper/contracts/BigMath.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b12+commit.a01cdc8"
  },
  "networks": {},
  "schemaVersion": "3.0.15",
  "updatedAt": "2019-09-25T17:44:08.518Z"
}